روی یک تیم هستیم و الگوی میکروسرویس داریم استفاده میکنیم


به طور کلی، در معماری microservice دو راه برای برقرای ارتباط بین سرویس ها وجود دارد:

    ارتباط Synchronous (همزمان): در این نوع ارتباط، یک برنامه یا سرویس به طور مستقیم و با استفاده از پروتکل HTTP با برنامه دیگر ارتباط برقرار می کند که نیاز به پاسخ فوری و مستقیم از سرور دارد.

    ارتباط Asynchronous (غیرهمزمان): در این نوع ارتباط که از مکانیزم publish-subscribe استفاده می شود، نیازی به پاسخ فوری از سرور نیست و پیام ها (درخواست ها) به یک کارگزار پیام (مانند RabbitMQ) ارسال می شوند و سرویس مربوطه آن را گرفته و پردازش می کند.


--------------------------------------------------------------------------------------------------
مسیج بروکر ها یا کارگزار پیام نرم افزاری که برنامه و سیستم ها و سرویس ها رو قادر میسازد تا با یکدیگر ارتباط برقرار کرده و تبادل اطلاعات نمایید
مسیج بروکر ها با ترجمه پیام به پروتکل های پیام رسانی رسمی این کار رو انجام میدهند
به سرویس ها وابسته این امکان رو میدهد تا با یکدیگر صحبت کنند
پیام ها توسط یک تولید کننده به producer تولید میشوند
یک پیام که تولید میشود و در صف قرار میگیرد به این فرایند Enqueuing نام دارد
پیام هایی که ارسال میشود(push) در یک صف باقی میماند و منتظر میماند که یک consumer ان را پردازش کند که به این فرایند Dequeuing معروف هست
و این امکان رو داریم که یک پیام را در انتظار دریافت یک consumer در یک صف پیام قرار دهیم
بنابراین فرایند (push) شدن یک پیام و قرار گرفتن در یک صف(queue) توسط producer و مصرف شدن ان توسط consumer را که عنوان Message queueing (صف بندی پیام) شناخته میشود


--------------------------------------------------------------------------------------------------
پروتکل های rabbitmq
amqp
stomp
mqtt
http

AMQPپروتکل اصلی هست که توسط این بروکر پشتیبانی میشود
stompیک پروتکل پیام رسانی ساده هست
mqttیک پروتکل باینری هست که به دلیل ارسال پیام سبک معروف هست





-------------------------------------------------------------------------------------------------

جریان پیام در RabbitMQ
پیام ها مستقیما به صف ارسال نمیشود ودر ابتدا توسط exchange دریافت میشود این exchange ها بسته به قوانین که تعیین شده هست چهار نوع مختلف وجود دارد
به طور کی این exchange ها پیام ها رو درون صف ها پخش میکنند البته قاب بیان هست که این صف ها از روش fifo پیروی میکنند
fifo = first in first out


برای ارسال پیام های مناسب به صف های مناسب از قوانینی به نام binding استفاده میکنند این binding قوانینی هست که برای اتصال صف ها به exchange تنطیم میشود
--------------------------------------------------------------------------------------------------
در جریان پیام در RabbitMQ
 تولیدکننده یک پیام را exchange، push می کند. هنگام ایجاد exchange، نوع آن باید مشخص شود.
 این Exchange پیام را دریافت می کند و اکنون مسئول مسیر دهی به پیام است
 بین exchange و صف باید binding تنظیم شود  exchange، براساس ویژگی های پیام ها (message attribute)، آن ها را به صف ها مسیردهی می کند
 یام ها در صف قرار می گیرند تا زمانی که توسط یک consumer، مصرف شوند
 و Consumer، پیام ها را پردازش می کند
--------------------------------------------------------------------------------------------------
routing key = یک ادرس هست که اکسچنچ ها برای تصمیم گیری در مورد نحوه مسردهی پیام از ان استفاده میشود
در exchangeها پیام ها در صف های متفاوتی مسیر دهی میشود
direct
fanout
topic
header exchange


 برای مطالعه بهتر در این ادرس وجود دارد
 https://sokanacademy.com/blog/%D8%B1%D8%A7%D9%87%D9%86%D9%85%D8%A7%DB%8C-%D8%B3%D8%B1%DB%8C%D8%B9%DB%8C-%D8%A8%D8%B1%D8%A7%DB%8C-%D8%AF%D8%B1%DA%A9-rabbitmq






